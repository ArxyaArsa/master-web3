using System;
using System.Collections.Generic;
using System.Text;
using Warehousing.Domain.SeedWork;

namespace Warehousing.Domain.AggregateModels.SupplierAggregate
{
    public class Supplier : Entity, IAggregateRoot
    {
        //public int Id { get; private set; }       // in Entity

        // created values
        public string Name { get; private set; }
        public string Description { get; private set; }
        public SupplierContact Contact { get; private set; }    // ValueObject
        public SupplierAddress Address { get; private set; }    // ValueObject

        // autogenerated values
        public DateTime AddDate { get; private set; }
        public DateTime? FirstContractDate { get; private set; }
        public DateTime? LastContractDate { get; private set; }

        // children
        private readonly List<Contract> _contracts;
        public IReadOnlyCollection<Contract> Contracts => _contracts;

        public Supplier()
        {
            _contracts = new List<Contract>();
        }

        public Supplier(string name, string description, SupplierContact contact, SupplierAddress address) : this()
        {
            Update(name, description, contact, address);
        }

        public void AddContract(string contractDesc, DateTime startDate, DateTime paymentDueUntil, bool isPayed = false)
        {
            var utcNow = DateTime.UtcNow;

            var contract = new Contract(this, contractDesc, startDate, paymentDueUntil, isPayed);

            // domain logic
            if (_contracts.Count == 0 || FirstContractDate == null)
                FirstContractDate = utcNow;
            LastContractDate = utcNow;

            _contracts.Add(contract);
        }

        public void Update(string name, string description, SupplierContact contact, SupplierAddress address)
        {
            Name = name ?? throw new ArgumentNullException("Supplier Name cannot be empty");
            Description = description;
            Contact = contact;
            Address = address;

            AddDate = DateTime.UtcNow;
        }
    }
}
